name: Pipeline
on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'
    types: [opened, synchronize, reopened]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check-test-status:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - id: check
        name: Check previous test status
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BRANCH="${{ github.head_ref }}"
          else
            BRANCH="${{ github.ref_name }}"
          fi
          
          TEST_STATUS=$(gh run list --workflow=Pipeline.yml --branch=$BRANCH --json conclusion --jq '.[0].conclusion')
          if [[ "$TEST_STATUS" != "success" ]]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test:
    if: |
      needs.check-test-status.outputs.should_run == 'true' ||
      github.event_name == 'push' && (
        contains(github.event.head_commit.modified, 'src/') ||
        contains(github.event.head_commit.modified, 'tests/') ||
        contains(github.event.head_commit.modified, 'pyproject.toml') ||
        contains(github.event.head_commit.modified, 'pytest.ini') ||
        contains(github.event.head_commit.modified, '**/test.yaml')
      ) ||
      github.event_name == 'pull_request' && (
        contains(github.event.pull_request.changed_files, 'src/') ||
        contains(github.event.pull_request.changed_files, 'tests/') ||
        contains(github.event.pull_request.changed_files, 'pyproject.toml') ||
        contains(github.event.pull_request.changed_files, 'pytest.ini') ||
        contains(github.event.pull_request.changed_files, '**/test.yaml')
      )
    needs: check-test-status
    timeout-minutes: 15
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        timeout-minutes: 3

      - name: Setup Python
        uses: actions/setup-python@v5
        timeout-minutes: 3
        with:
          python-version: '3.11'

      - name: Cache model files
        uses: actions/cache@v3
        timeout-minutes: 6
        with:
          path: /tmp/cache
          key: ${{ runner.os }}-model-cache-${{ hashFiles('**/settings.yaml') }}
          restore-keys: |
            ${{ runner.os }}-model-cache-${{ hashFiles('**/settings.yaml') }}

      - name: Restore virtual environment
        id: cache-venv
        uses: actions/cache/restore@v3
        timeout-minutes: 6
        with:
          path: .venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/pyproject.toml') }}

      - name: Create virtual environment and install dependencies
        if: steps.cache-venv.outputs.cache-hit != 'true'
        timeout-minutes: 5
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install --upgrade --root-user-action=ignore -e .
          pip install --upgrade pytest pytest-asyncio pytest-dependency pytest-order pytest-timeout pytest-cov pytest-socket

      - name: Cache virtual environment
        uses: actions/cache/save@v3
        if: steps.cache-venv.outputs.cache-hit != 'true'
        timeout-minutes: 3
        with:
          path: .venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/pyproject.toml') }}

      - name: Run tests
        timeout-minutes: 10
        run: |
          source .venv/bin/activate
          pytest tests/

  build:
    needs: test
    if: |
      github.event_name == 'push' && github.ref == 'refs/heads/main' && (
        contains(github.event.head_commit.modified, 'src/') ||
        contains(github.event.head_commit.modified, 'pyproject.toml') ||
        contains(github.event.head_commit.modified, 'bentofile.yaml') ||
        contains(github.event.head_commit.modified, 'bento_config.yaml') ||
        contains(github.event.head_commit.modified, 'setup.py') ||
        contains(github.event.head_commit.modified, 'alembic/') ||
        contains(github.event.head_commit.modified, 'alembic.ini')
      ) ||
      github.event_name == 'pull_request' && (
        github.event.action == 'opened' ||
        github.event.action == 'synchronize' ||
        github.event.action == 'reopened'
      ) && (
        contains(github.event.pull_request.changed_files, 'src/') ||
        contains(github.event.pull_request.changed_files, 'pyproject.toml') ||
        contains(github.event.pull_request.changed_files, 'bentofile.yaml') ||
        contains(github.event.pull_request.changed_files, 'bento_config.yaml') ||
        contains(github.event.pull_request.changed_files, 'setup.py') ||
        contains(github.event.pull_request.changed_files, 'alembic/') ||
        contains(github.event.pull_request.changed_files, 'alembic.ini')
      )
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        timeout-minutes: 3

      - name: Setup Python
        uses: actions/setup-python@v5
        timeout-minutes: 3
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Restore virtual environment
        uses: actions/cache/restore@v3
        timeout-minutes: 3
        with:
          path: .venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/pyproject.toml') }}

      - name: Source virtual environment
        timeout-minutes: 1
        run: |
          source .venv/bin/activate

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        timeout-minutes: 3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        timeout-minutes: 3
        with:
          install: true

      - name: Build container
        timeout-minutes: 20
        env:
          VIRTUAL_ENV: ${{ github.workspace }}/.venv
          PATH: ${{ github.workspace }}/.venv/bin:${{ env.PATH }}
        run: |
          bentoml build
          bentoml containerize evagallery_ai_api:latest \
            --image-tag evagalleryone/ai:latest \
            --enable-features tracing-otlp,grpc,monitor-otlp,tracing,grpc-reflection,grpc-channelz \
            --build-arg EVA_AI_MODEL__CACHE_DIR=${{ vars.EVA_AI_MODEL__CACHE_DIR || '/tmp/cache' }} \
            --build-arg EVA_AI_MODEL__PRE_DOWNLOAD_DURING_BUILD=${{ vars.EVA_AI_MODEL__PRE_DOWNLOAD_DURING_BUILD || 'true' }} \
            --cache-to type=gha,mode=max \
            --progress plain

  push:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 15
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        timeout-minutes: 3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        timeout-minutes: 3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push to Docker Hub
        uses: docker/build-push-action@v5
        timeout-minutes: 10
        with:
          push: true
          tags: evagalleryone/ai:latest
          cache-from: type=gha 
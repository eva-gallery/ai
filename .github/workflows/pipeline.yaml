name: Pipeline
on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'
    types: [opened, synchronize, reopened]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check-test-status:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - id: check
        name: Check previous test status
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BRANCH="${{ github.head_ref }}"
          else
            BRANCH="${{ github.ref_name }}"
          fi
          
          echo "Checking branch: $BRANCH"
          WORKFLOW_ID=$(gh api repos/${{ github.repository }}/actions/workflows | jq -r '.workflows[] | select(.name=="Pipeline") | .id')
          echo "Found workflow ID: $WORKFLOW_ID"
          
          TEST_STATUS=$(gh run list --workflow=$WORKFLOW_ID --branch=$BRANCH --json conclusion --jq '.[0].conclusion')
          echo "Previous test status: $TEST_STATUS"
          
          if [[ "$TEST_STATUS" != "success" ]]; then
            echo "Tests should run: previous status was not success"
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "Tests can be skipped: previous status was success"
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  check-build-status:
    runs-on: ubuntu-latest
    outputs:
      first_build: ${{ steps.check.outputs.first_build }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - id: check
        name: Check if first build
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BRANCH="${{ github.head_ref }}"
          else
            BRANCH="${{ github.ref_name }}"
          fi
          
          echo "Checking branch: $BRANCH"
          WORKFLOW_ID=$(gh api repos/${{ github.repository }}/actions/workflows | jq -r '.workflows[] | select(.name=="Pipeline") | .id')
          echo "Found workflow ID: $WORKFLOW_ID"
          
          BUILD_COUNT=$(gh run list --workflow=$WORKFLOW_ID --branch=$BRANCH --json jobs --jq '[.[] | select(.jobs[].name == "build" and .jobs[].conclusion != "skipped")] | length')
          echo "Number of previous actual builds: $BUILD_COUNT"
          
          if [[ "$BUILD_COUNT" == "0" ]]; then
            echo "This is the first build"
            echo "first_build=true" >> $GITHUB_OUTPUT
          else
            echo "This is not the first build"
            echo "first_build=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  check-pr-changes:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.check.outputs.has_changes }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - id: check
        name: Check modified files
        run: |
          echo "Checking files changed in latest commit"
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD)
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          if echo "$CHANGED_FILES" | grep -qE "^(src/|pyproject.toml|bentofile.yaml|bento_config.yaml|setup.py|alembic/|alembic.ini)"; then
            echo "Found relevant changes"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "No relevant changes found"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

  test:
    if: |
      needs.check-test-status.outputs.should_run == 'true' ||
      github.event_name == 'push' && (
        contains(github.event.head_commit.modified, 'src/') ||
        contains(github.event.head_commit.modified, 'tests/') ||
        contains(github.event.head_commit.modified, 'pyproject.toml') ||
        contains(github.event.head_commit.modified, 'pytest.ini') ||
        contains(github.event.head_commit.modified, '**/test.yaml')
      ) ||
      github.event_name == 'pull_request' && (
        contains(github.event.pull_request.changed_files, 'src/') ||
        contains(github.event.pull_request.changed_files, 'tests/') ||
        contains(github.event.pull_request.changed_files, 'pyproject.toml') ||
        contains(github.event.pull_request.changed_files, 'pytest.ini') ||
        contains(github.event.pull_request.changed_files, '**/test.yaml')
      )
    needs: check-test-status
    runs-on: ubuntu-latest
    steps:
      - name: Debug info
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Should run tests: ${{ needs.check-test-status.outputs.should_run }}"
          echo "Changed files in PR: ${{ toJSON(github.event.pull_request.changed_files) }}"
          echo "Modified files in push: ${{ toJSON(github.event.head_commit.modified) }}"

  build:
    needs: [test, check-build-status, check-pr-changes]
    if: |
      github.event_name == 'push' && github.ref == 'refs/heads/main' && (
        contains(github.event.head_commit.modified, 'src/') ||
        contains(github.event.head_commit.modified, 'pyproject.toml') ||
        contains(github.event.head_commit.modified, 'bentofile.yaml') ||
        contains(github.event.head_commit.modified, 'bento_config.yaml') ||
        contains(github.event.head_commit.modified, 'setup.py') ||
        contains(github.event.head_commit.modified, 'alembic/') ||
        contains(github.event.head_commit.modified, 'alembic.ini')
      ) ||
      github.event_name == 'pull_request' && (
        needs.check-build-status.outputs.first_build == 'true' ||
        needs.check-pr-changes.outputs.has_changes == 'true'
      )
    runs-on: ubuntu-latest
    steps:
      - name: Debug info
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "First build: ${{ needs.check-build-status.outputs.first_build }}"
          echo "Has changes: ${{ needs.check-pr-changes.outputs.has_changes }}"
          echo "Modified files in push: ${{ toJSON(github.event.head_commit.modified) }}"

  push:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 15
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        timeout-minutes: 3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        timeout-minutes: 3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push to Docker Hub
        uses: docker/build-push-action@v5
        timeout-minutes: 10
        with:
          push: true
          tags: evagalleryone/ai:latest
          cache-from: type=gha 